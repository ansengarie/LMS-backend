generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum untuk status course
enum CourseStatus {
  ACTIVE
  INACTIVE
}

// Enum untuk Role User
enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

// Model User
model User {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  password        String
  role            Role
  profile_picture String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Tambahkan relasi ke Score
  Scores Score[] // Menambahkan relasi ke model Score
  // Relasi: Pengguna yang mengirim pesan
  sentMessages  Message[] @relation("Sender")

  // Relasi: Pengguna yang menerima pesan
  receivedMessages Message[] @relation("Receiver")
}

// Model Course
model Course {
  id          String       @id @default(uuid())
  title       String
  description String?
  created_by  String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  status      CourseStatus

  // Tambahkan relasi ke Score
  Scores  Score[] // Menambahkan relasi ke model Score
  Session Session[]
}

// Model Session
model Session {
  id          String   @id @default(uuid())
  course_id   String // Foreign Key ke Course
  title       String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relasi: Session terkait dengan satu Course
  course Course @relation(fields: [course_id], references: [id])

  // Relasi: Session memiliki banyak Material
  Materials Material[]
}

// Model Material
model Material {
  id         String   @id @default(uuid())
  session_id String // Foreign Key ke Session
  title      String
  type       String // PDF, VIDEO, TEXT
  file_url   String // URL ke file materi
  created_at DateTime @default(now())

  // Relasi: Material terkait dengan satu Session
  session Session @relation(fields: [session_id], references: [id])
}

// Model Score
model Score {
  id         String   @id @default(uuid())
  user_id    String // Foreign key ke User
  course_id  String // Foreign key ke Course
  points     Int
  created_at DateTime @default(now())

  // Relasi: Score terkait dengan satu User
  user User @relation(fields: [user_id], references: [id])

  // Relasi: Score terkait dengan satu Course
  course Course @relation(fields: [course_id], references: [id])
}

// Model Message
model Message {
  id          String   @id @default(uuid())    // ID unik untuk pesan
  sender_id   String   // ID pengguna yang mengirim pesan
  receiver_id String   // ID pengguna yang menerima pesan
  content     String   // Isi pesan
  created_at  DateTime @default(now())         // Waktu pembuatan pesan

  // Relasi: Pengirim pesan
  sender      User     @relation("Sender", fields: [sender_id], references: [id])

  // Relasi: Penerima pesan
  receiver    User     @relation("Receiver", fields: [receiver_id], references: [id])
}